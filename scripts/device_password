#! /bin/sh
# vim: set tabstop=4 syntax=sh :
# SPDX-License-Identifier: GPL-2.0-or-later
#######################################################################################################
#                                                                                                     #
# compute the device password for a FRITZ!Box router                                                  #
#                                                                                                     #
###################################################################################################VER#
#                                                                                                     #
# device_password, version 0.4, from decoder                                                          #
#                                                                                                     #
# This script is a part of the project from https://github.com/PeterPawn/decoder.                     #
#                                                                                                     #
###################################################################################################CPY#
#                                                                                                     #
# Copyright (C) 2014-2019 P.Haemmerlein (peterpawn@yourfritz.de)                                      #
#                                                                                                     #
###################################################################################################LIC#
#                                                                                                     #
# This project is free software, you can redistribute it and/or modify it under the terms of the GNU  #
# General Public License as published by the Free Software Foundation; either version 2 of the        #
# License, or (at your option) any later version.                                                     #
#                                                                                                     #
# This project is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;           #
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.           #
# See the GNU General Public License under http://www.gnu.org/licenses/gpl-2.0.html for more          #
# details.                                                                                            #
#                                                                                                     #
#######################################################################################################
#                                                                                                     #
# The script takes the variable components of a FRITZ!Box device "identity" and computes the MD5 hash #
# used internally as device password for various encryptions. This isn't the same as the character    #
# string from "privatekeypassword", another project of mine on GitHub.                                #
#                                                                                                     #
# For this computation the following values are needed:                                               #
# - device serial number from the 'urlader environment' - it was 16 times '0' for a long time, but on #
#   newer devices AVM has really integrated the serial number from the back of the device             #
# - the content of 'maca' address from the 'urlader environment' - it can be taken from any contact   #
#   to the LAN side of the device or from various other network activities (where it's sometimes      #
#   called 'Serial' instead of the value above), JUIS check requests or TR-069 INFORM requests are a  #
#   commonly used source for this value, if you've only access to the WAN side of the box             #
# - the factory-set WLAN key - it's shown on the back of the router too and may be read with TR-069   #
#   functions or - if you've access to the GUI or a print-out of the current QR code and the owner    #
#   did not change the factory key - from a running device                                            #
# - if the device has a CWMP account configured, the value of 'tr069_passphrase' (also printed on the #
#   back of the device) is needed as another variable                                                 #
#                                                                                                     #
# No matter, where you did get the data from, the password is computed as a MD5 hash of these two,    #
# three or four components, with a newline character between them (but not after the WLAN key and a   #
# TR-069 passphrase).                                                                                 #
#                                                                                                     #
# If you'd like to compute the password for a configuration export file, which was created without a  #
# specified password, you may omit the WLAN key and the TR-069 passphrase and the computed hash value #
# can then be used to decrypt such a file.                                                            #
#                                                                                                     #
#######################################################################################################
usage_text()
{
	__purpose_hdr
	__nl "This script accepts up to four parameters on the command line (each of them stands for a"
	__nl "property from the urlader environment of a FRITZ!OS device) and generates a device-specific"
	__nl "encryption key from their values.\n"
	__nl "The generated key will be written as hexadecimal string to STDOUT.\n"
	__usage_hdr
	__usage_opt "options"; __usage_opt_end; __usage_arg "prop1"; __usage_arg "prop2"; __usage_opt "prop3" "$(__usage_opt "prop4")"
	__usage_end
	__options_hdr
	__option_debug
	__option_help
	__option_version
	__options_end
	__nl "The following properties are needed to create a valid key:\n"
	__nl; __undl "prop1"; printf " is the serial number of the device, it consists of 15 characters and can be found"
	__nl "at the back of the device, together with other info printed on a sticker. But for a long"
	__nl "time this serial number was only printed there and only the latest models contain this"
	__nl "value in a place, where it can be read by the firmware. All older models used a character"
	__nl "string of 16 zeros here. You have to know, what value your device really uses - but you"
	__nl "could try both approaches, if you've problems with a key version. The correct value can"
	__nl "be found as "; __undl "SerialNumber"; printf " in a support-data file or in an environment dump.\n"
	__nl; __undl "prop2"; printf " is the value of the "; __undl "maca"; printf " field from environment and it's used as Ethernet address"
	__nl "(MAC) on the LAN side of a FRITZ!Box device. Its format is also well-known (6 groups"
	__nl "of two hexadecimal digits (upper case for A to Z), separated by colons) and the script"
	__nl "verifies the format to ensure it's valid.\n"
	__nl "The "; __undl "prop3"; printf " value is the content of the pre-defined WLAN key ("; __undl "wlan_key"; printf ") from factory-"
	__nl "settings and it can be found on the sticker too. It consists of 16 or 20 digits and the"
	__nl "script verifies the expected format.\n"
	__nl "The "; __undl "prop4"; printf " value is only used, if the device in question is equipped with a CWMP account"
	__nl "in its factory settings. Then the content of the "; __undl "tr069_passphrase"; printf " entry is incorporated"
	__nl "in the computation of a device-specific key.\n"
	__nl "The third and fourth arguments ("; __undl "wlan_key"; printf " and "; __undl "tr069_passphrase"; printf ") are optional (and the"
	__nl "latter value may be missing on a device). If a device-specific key is intended to encrypt"
	__nl "settings export files, FRITZ!OS versions will use only the first two properties to"
	__nl "compute the key value."
}
#######################################################################################################
#                                                                                                     #
# usage and display helpers from YourFritz framework                                                  #
#                                                                                                     #
#######################################################################################################
__bold__="$(printf "\033[1m")"
__undl__="$(printf "\033[4m")"
__rset__="$(printf "\033[0m")"
__bold() { printf "$__bold__"; printf -- "$@"; printf "$__rset__"; }
__undl() { printf "$__undl__"; printf -- "$@"; printf "$__rset__"; }
__show_script_name()
{
	printf "\033[1m\033[31m${0#*/}\033[0m: "
}
__get_script_lines()
{
	sed -n -e "/^#*${1}#\$/,/^#\{20\}.*#\$/p" "$0" | \
	sed -e '1d;$d' | \
	sed -e 's|# \(.*\) *#$|\1|' | \
	sed -e 's|^#*#$|--|p' | \
	sed -e '$d'
}
__license()
{
	__get_script_lines "LIC"
}
__version()
{
	__get_script_lines "VER" | sed -e "1,2s|^\([^,]*\),\(.*\)\$|$__bold__\1$__rset__,\2|"
}
__copyright()
{
	__get_script_lines "CPY"
}
__emsg()
{
	__show_script_name 1>&2
	mask="$1"
	shift
	printf "${__bold__}${mask}${__rset__}\a\n" "$@" 1>&2
}
__check_option()
{
	o="$1"
	shift
	for v in $*; do
		[ "$o" = "$v" ] && printf 1 && return 0
	done
	printf 0
	return 1
}
__is_option()
{
	[ "$(expr -- "$1" : "\(.\).*")" = "-" ] && return 0 || return 1
}
__is_last_option()
{
	[ "$1" = "--" ] && return 0 || return 1
}
__options_end__="eval while __is_option \"\$1\"; do __is_last_option \"\$1\" && shift && break;\
	__emsg \"Unknown option '%s'.\" \"\$1\"; exit 1; done;"
__version_option()
{
	if __check_option "$1" "-V" "--version" >/dev/null; then
		__version
		__copyright
		__license
		printf "\n"
		exit 1
	fi
	return 1
}
__version_option__="eval __version_option \$@ && exit 0"
__help_option()
{
	if __check_option "$1" "-h" "--help" >/dev/null; then
		__usage
		exit 1
	fi
}
__help_option__="eval __help_option \$@"
__debug_option()
{
	__check_option "$1" "-d" "--debug" && return 0
	return 1
}
__debug_option__="eval __debug_set__=\$(__debug_option \$1) && __debug_text__=\"\$1\" && shift"
__debug_on__="eval __debug_set__=1; __debug_text__=\"-d\";"
__is_debug() { [ $__debug_set__ -eq 1 ] && return 0 || return 1; }
__debug()
{
	[ $__debug_set__ -eq 1 ] || return;
	mask="$1"
	shift
	printf "$mask" "$@" 1>&2
}
__usage()
(
	indent=0
	__indent_on() { indent=$(( indent + 4 )); }
	__indent_off() { indent=$(( indent - 4 )); }
	__indent() { [ $indent -gt 0 ] && printf "%0${indent}s" " "; };
	__nl() { printf "\n%s" "$(__indent)"; printf -- "$1"; }
	__purpose_hdr() { __nl; __bold "Purpose:"; printf "\n"; }
	__usage_name() { __bold "${0#*/}"; }
	__usage_hdr() { printf "\n"; __nl; __bold "Usage:\n"; __indent_on; __nl "$(__usage_name)"; }
	__usage_end() { __indent_off; printf "\n"; }
	__usage_opt_int() { v="$1"; shift; [ $# ] && m="$@"; printf -- "[ %s%s ]" "$(__undl "$v")" "$m"; unset m v; };
	__usage_opt_end() { printf -- " [ -- ]"; }
	__usage_opt() { printf -- " %s" "$(__usage_opt_int "$@")"; }
	__usage_arg() { printf -- " %s" "$(__undl "$1")"; }
	__options_hdr() { __nl "Supported "; __undl "options"; printf " are:\n"; }
	__options_end() { printf "\n"; }
	__option_show_opt() {
		printf -- "%s, %s" "$2" "$3"
		__l4__=${#4}
		[ $__l4__ -gt 0 ] && printf " %s%s%s" "$__undl__" "$4" "$__rset__" && __l4__=$(( __l4__ + 1 ))
		printf "%0$(( $1 - ${#2} - ${#3} - __l4__ - 3 ))s" " "
		unset __l4__
	}
	__option_show_desc() { printf -- "- %s" "$@"; }
	__option_debug() { __nl; __option_show_opt ${1:-15} "-d" "--debug"; __option_show_desc "display debug info on STDERR; must prefix all other options, if used"; }
	__option_help()	{ __nl; __option_show_opt ${1:-15} "-h" "--help"; __option_show_desc "show this information (must be the first option)"; }
	__option_version()	{ __nl; __option_show_opt ${1:-15} "-V" "--version"; __option_show_desc "show version and exit (must be the first option)"; }
	__end() { printf "\n%s\n" "$__rset__"; }

	__version
	__copyright
	__license
	usage_text
	__end
)
__set_base_dir__="eval [ \"\$(expr \"\$0\" : \".*\(/\).*\")\" = \"/\" ] && __base_dir__=\"\${0%/*}\" || __base_dir__=\".\""
__set_base_dir() { __set_base_dir__="$1"; }
__check_required_scripts()
{
	d="$1"
	shift
	for n in $@; do
		eval $n="$d/$n"
		eval f="\$$n"
		if ! [ -x "$f" ]; then
			__emsg "Missing another needed executable: %s." "$n"
			return 1
		fi
		printf "$n=%s\n" $f
	done
	return 0
}
__check_required_scripts__="eval __scripts__=\"\$(__check_required_scripts \"\$__base_dir__\" \"\$__required_scripts\")\" && \
	eval \$__scripts__ || exit 1"
__check_required_commands()
{
	for n in $@; do
		command -v $n 2>/dev/null 1>&2 && continue
		__emsg "Missing a required command: %s." "$n"
		return 1
	done
	return 0
}
__check_required_commands__="eval __check_required_commands \"\$__required_commands\" || exit 1"
__check_terminal()
{
	[ -t $1 ] || return 1
	if [ $1 -eq 0 ]; then
		fd="STDIN"
	elif [ $1 -eq 1 ]; then
		fd="STDOUT"
	else
		fd="FILE ($1)"
	fi
	shift
	__emsg "%s is a terminal device. %s" "$fd" "$@"
}

__required_scripts="crypto"
#######################################################################################################
#                                                                                                     #
# check parameters                                                                                    #
#                                                                                                     #
#######################################################################################################
$__help_option__
$__version_option__
$__debug_option__
$__options_end__
if [ $# -lt 2 ]; then
	__emsg "Missing the first two (mandatory) arguments."
	exit 1
fi
serial="$1"
if ! [ "${serial}" = "0000000000000000" ] && [ ${#serial} -ne 15 ]; then
	__emsg "The specified serial number '%s' should contain exactly 15 characters." "$serial"
	exit 1
fi
maca="$2"
if [ ${#maca} -ne 17 ]; then
	__emsg "The specified MAC address '%s' should contain exactly 17 characters." "$maca"
	exit 1
fi
wlan_key="$3"
if [ ${#wlan_key} -gt 0 ] && [ ${#wlan_key} -ne 16 ] && [ ${#wlan_key} -ne 20 ]; then
	__emsg "A correct WLAN key contains 16 or 20 (decimal) numbers, you specified this one: '%s'." "$wlan_key"
	exit 1
fi
if [ ${#wlan_key} -gt 0 ]; then
	if [ ${#4} -gt 0 ]; then # append TR-069 passphrase without newline
		wlan_key="$wlan_key$4"
	fi
fi
if ! [ "$(expr "$maca" : "\([A-F0-9:]*\)")" = "$maca" ]; then
	__emsg "The specified MAC address '%s' contains unexpected characters." "$maca"
	exit 1
fi
#######################################################################################################
#                                                                                                     #
# check environment                                                                                   #
#                                                                                                     #
#######################################################################################################
$__set_base_dir__
$__check_required_scripts__
#######################################################################################################
#                                                                                                     #
# compute the hash now                                                                                #
#                                                                                                     #
#######################################################################################################
printf "%s\n%s\n%s" "$serial" "$maca" "$wlan_key" | "$crypto" digest $__debug_text__
exit $?
#######################################################################################################
#                                                                                                     #
# end of script                                                                                       #
#                                                                                                     #
#######################################################################################################
